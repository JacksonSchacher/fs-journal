(window.webpackJsonp=window.webpackJsonp||[]).push([[55],{495:function(e,t,a){"use strict";a.r(t);var s=a(1),r=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"var-let-const"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#var-let-const"}},[e._v("#")]),e._v(" VAR LET CONST")]),e._v(" "),a("h2",{attrs:{id:"scope"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#scope"}},[e._v("#")]),e._v(" SCOPE")]),e._v(" "),a("hr"),e._v(" "),a("p",[e._v("Scope is the range of code variables are allowed to be used in.")]),e._v(" "),a("hr"),e._v(" "),a("h2",{attrs:{id:"hoisting"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hoisting"}},[e._v("#")]),e._v(" Hoisting")]),e._v(" "),a("hr"),e._v(" "),a("p",[e._v("The process of variables being pulled to the top of their scope before being executed.")]),e._v(" "),a("hr"),e._v(" "),a("h2",{attrs:{id:"using-let-const-and-var"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#using-let-const-and-var"}},[e._v("#")]),e._v(" Using Let, Const, and Var")]),e._v(" "),a("hr"),e._v(" "),a("p",[e._v("let is used when you want a block scope variable.")]),e._v(" "),a("p",[e._v("const is used when you don't want to change the value of the variable throughout the scope.")]),e._v(" "),a("p",[e._v("var is used when you need a global variable or function scoped.")])])}),[],!1,null,null,null);t.default=r.exports}}]);